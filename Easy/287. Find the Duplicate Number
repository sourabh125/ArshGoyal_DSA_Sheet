
// Solution 1:  (using 2 loop)
// Time complxity(N^2)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
        int n=nums.size();
        int count=0;
        for(int i=0;i<n;i++)
        {
            count=0;
            for(int j=0;j<n;j++)
            {
                if(nums[i]==nums[j])
                {
                    count++;
                }
            }
            if(count==2) return nums[i];
        }
        return -1;
    }
};

// -------------------------*****************------------------------------------


// Solution 2: (using sorting and comparing 2 element)
// Time complexity O(N^2) 

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
        int n=nums.size();
        sort(nums.begin(),nums.end());
        for(int i=1;i<n;i++)
        {
            if(nums[i]==nums[i-1]) return nums[i];
        }
        return -1;
    }
};


// -------------------------------**********************-------------------------

// solution 3:  (using map)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
        int n=nums.size();
        map<int,int> mp;
        for(int i=0;i<n;i++)
        {
            mp[nums[i]]++;
            if(mp[nums[i]]>1) return nums[i];
        }
        return -1;
    }
};
